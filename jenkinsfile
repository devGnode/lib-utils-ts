import groovy.transform.Field;

@Field def lib_repo_url = "https://github.com/devGnode/lib-utils-ts.git" as String
@Field def git_credentials = "505ffe05-122c-499f-b83c-1aa544cc56e0" as String
@Field def npm_credentials = "906cf641-7d13-452e-993b-76cfe2f527ec" as String
@Field def hasFailed
@Field def timestamp = "" as String

timestamps{
    parameters{
        string(name: 'VERSION', defaultValue: '2.0.0-alpha', description:'Package version')
        string(name: 'OLD_VERSION', defaultValue: '2.0.0-alpha', description:'Old package version')
        string(name: 'git_branch', defaultValue: 'develop', description:'branch to push commit')
    }
    node{

        stage("Git Checkout SCM"){
            cleanWs();
            deleteDir();

          git branch: "develop",
            credentialsId: "${git_credentials}",
            url: "${lib_repo_url}"
        }

        docker.image("alpine-nodejs:3.12").inside("-u root") {

            stage("Version"){
                 catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                    def value = "" as String;

                   	sh 'cat package.json | grep version'
                    value = sh( returnStdout: true, script: "sed -e \"s/${OLD_VERSION}/${VERSION}/g\" package.json" )
                    sh "echo '${value}' > package.json"
                    sh 'cat package.json | grep version'
                }
            }

            stage("Test build"){
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                   	sh 'cat package.json'
                    sh 'npm install'
                    hasFailed = sh ( returnStatus: true, script: 'npm run build')
                }
            }


            stage("NPM Publish"){
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                    if( hasFailed == 0 ){
                        sh 'npm whoami'
                        hasFailed = sh( returnStatus: true, script: 'npm publish')
                       if(hasFailed != 0 ) error("Failed to publish ${VERSION}")
                    }else{
                        error("Failed to publish ${VERSION}")
                    }
                }
            }

        }

        stage("Git push version"){
               catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){

                    if(hasFailed == 0 ){
                       withCredentials([usernamePassword(credentialsId: "${git_credentials}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh 'cat package.json'
                            sh 'git status'
                            sh 'git add -f package.json'
                            sh 'git commit -m "upgrade version"'
                            sh 'git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/devGnode/lib-utils-ts.git develop'
                       }
                    }else{
                        error("Failed to publish ${VERSION}")
                    }
                }
        }

       stage("Clean"){
            def color = "#1C76A6" as String;

            cleanWs()
            deleteDir()

            if( hasFailed != 0 )color = "#ff0000";
            manager.addShortText("BUILD : ${VERSION}",'white',"${color}",'1px','blue')
       }
    }

}